#+title: Notes

* Tasks
** DONE basic configuration traits
** DONE optional feature to enable http requests
** TODO implement default debug trait for Configurable
** need workflows
- [ ] coverage
- [X] tests/clippy/check/fmt
- [ ] integration tests (require only redis now)
** TODO healthcheck
- [X] internet
- [ ] proxy with httpbin
- [ ] optional redis
- [ ] optional mongodb
- [ ] optional postgres
** DONE generic executor
- [X] basic version
- [X] tests for basic version
- [X] example for basic version
- [X] make in example in `examples/` folder
- [X] remove E from Task type, use string representation instead
- [X] in-memory backend for Tasks storage
- [X] split storage trait into separate module
- [X] docs for strage
- [X] docs for tasks
- [X] docs for executor
- [X] add workers settings
- [X] builder pattern for executor settings
** TODO further adjustments
- [X] re-export common crate - thiserror
- [X] pass context where db connections could be stored
- [X] rename example/basic.rs into executor_basic.rs
- [X] make_sorage return TaskStorage instead of wrapped with Arc<>
- [X] fix max_retries
- [X] fix tests after adding context to the executor
- [ ] adjust async tests to [tokio::test] and drop initialization of async runtime in code
- [X] task fail into storage, to collect totaly (by max_retries) failed tasks
- [X] reexport as much as possible from task_deport
- [X] optional redis storage backend using rustis
- [-] separate tests for redis backend
- [-] try to move tests init common function into separate file in tests/ folder
- [X] use same builder pattern for Application
- [X] pass task_id into the process
- [X] re-export Uuid
- [X] optional dependencies for task_deport
- [X] seriously figure out dependencies and reexport crates
** Refactor worker. Add basic monitoring capabilities.
- [X] worker is struct
- [X] add stats fields to collect worker stats
- [X] rename executor/executor.rs to something else
- [X] move WorkerStats into the separate module
- [ ] expose http endpoint with json collected basic stats from workers
** Refactor processor.
- [ ] shared context for processor. way to transform &Worker to SharedContext
- [ ] make example work with improved processor
- [ ] add storage error types context error types to TaskProcessorError
** Refactor storage (task deport)
- [ ] new type for TaskId
- [ ] remove custom error type for simplicity (no SE generic anymore yay!)
** Executor
- [ ] figure out how to move constrains from direct name of TaskStorage to something like Box<dyn impl TaskStorage>
- [ ] better task handling in executor, queue, started, finished and TaskStatus enum
- [ ] need catch unwind to handle all possible exceptions

** Task Deport
- [ ] add queued time, make started time optional (should be something when execution is started)
- [ ] split TaskStorage and TaskQueue implementation where task storage is pluggable
- [ ] drop task exceed time for execution
- [ ] separate thread to clean up staled tasks (or find the way how to not make them stalled)
- [ ] add more tests
** Important!!!!
- [X] thiserror should not be optional
- [ ] Use tokio per core executor to make tasks Sync maybe? if possible
- [X] implement purge for TaskStorage trait

** redis storage backend with bloom filter
** redis storage backend with priorities

* Notes
** httpbin could be launched as container "docker run -p 80:80 kennethreitz/httpbin"
